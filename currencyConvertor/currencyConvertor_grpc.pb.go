// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: currencyConvertor.proto

package currency_convertor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CurrencyConvertorService_Convert_FullMethodName = "/currencyConvertor.currencyConvertorService/convert"
)

// CurrencyConvertorServiceClient is the client API for CurrencyConvertorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyConvertorServiceClient interface {
	Convert(ctx context.Context, in *CurrencyConvertorRequest, opts ...grpc.CallOption) (*Money, error)
}

type currencyConvertorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyConvertorServiceClient(cc grpc.ClientConnInterface) CurrencyConvertorServiceClient {
	return &currencyConvertorServiceClient{cc}
}

func (c *currencyConvertorServiceClient) Convert(ctx context.Context, in *CurrencyConvertorRequest, opts ...grpc.CallOption) (*Money, error) {
	out := new(Money)
	err := c.cc.Invoke(ctx, CurrencyConvertorService_Convert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyConvertorServiceServer is the server API for CurrencyConvertorService service.
// All implementations must embed UnimplementedCurrencyConvertorServiceServer
// for forward compatibility
type CurrencyConvertorServiceServer interface {
	Convert(context.Context, *CurrencyConvertorRequest) (*Money, error)
	mustEmbedUnimplementedCurrencyConvertorServiceServer()
}

// UnimplementedCurrencyConvertorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyConvertorServiceServer struct {
}

func (UnimplementedCurrencyConvertorServiceServer) Convert(context.Context, *CurrencyConvertorRequest) (*Money, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedCurrencyConvertorServiceServer) mustEmbedUnimplementedCurrencyConvertorServiceServer() {
}

// UnsafeCurrencyConvertorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyConvertorServiceServer will
// result in compilation errors.
type UnsafeCurrencyConvertorServiceServer interface {
	mustEmbedUnimplementedCurrencyConvertorServiceServer()
}

func RegisterCurrencyConvertorServiceServer(s grpc.ServiceRegistrar, srv CurrencyConvertorServiceServer) {
	s.RegisterService(&CurrencyConvertorService_ServiceDesc, srv)
}

func _CurrencyConvertorService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyConvertorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConvertorServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyConvertorService_Convert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConvertorServiceServer).Convert(ctx, req.(*CurrencyConvertorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyConvertorService_ServiceDesc is the grpc.ServiceDesc for CurrencyConvertorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyConvertorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "currencyConvertor.currencyConvertorService",
	HandlerType: (*CurrencyConvertorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "convert",
			Handler:    _CurrencyConvertorService_Convert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currencyConvertor.proto",
}
